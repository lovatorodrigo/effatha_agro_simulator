// android/settings.gradle

pluginManagement {
    // Descobre o caminho do Flutter SDK
    def flutterSdkPath
    def props = new Properties()
    def propsFile = new File(settingsDir, "local.properties")
    if (propsFile.exists()) {
        propsFile.withInputStream { props.load(it) }
        flutterSdkPath = props.getProperty("flutter.sdk")
    }
    if (!flutterSdkPath) {
        flutterSdkPath = System.getenv("FLUTTER_HOME") ?: System.getenv("FLUTTER_ROOT")
    }
    if (!flutterSdkPath) {
        throw new GradleException(
            "Flutter SDK path not found. Defina 'flutter.sdk' em android/local.properties " +
            "ou a variável de ambiente FLUTTER_HOME/FLUTTER_ROOT."
        )
    }

    // Esta linha é o segredo para o plugin do Flutter ser resolvido sem versão:
    includeBuild("${flutterSdkPath}/packages/flutter_tools/gradle")

    repositories {
        // Ordem padrão OK
        google()
        mavenCentral()
        gradlePluginPortal()
    }

    // Versões dos plugins base
    plugins {
        id("com.android.application") version "8.6.0" apply false
        id("com.android.library")     version "8.6.0" apply false
        id("org.jetbrains.kotlin.android") version "1.9.24" apply false
        // NÃO declare o plugin do Flutter aqui – ele vem do includeBuild acima
    }
}

// Obs.: para evitar o erro de “prefer settings repositories…”, não
// forçamos repositoriesMode aqui. Mantemos apenas os repositórios.
dependencyResolutionManagement {
    repositories {
        google()
        mavenCentral()
        // Em alguns ambientes, este repositório ajuda a resolver artefatos do engine:
        // maven { url "https://storage.googleapis.com/download.flutter.io" }
    }
}

rootProject.name = "android"
include(":app")
